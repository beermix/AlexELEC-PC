diff -Naurp kodi-16.1-c6f6e0b/addons/resource.language.en_gb/resources/strings.po kodi-16.1-c6f6e0b-patch/addons/resource.language.en_gb/resources/strings.po
--- kodi-16.1-c6f6e0b/addons/resource.language.en_gb/resources/strings.po	2016-08-29 09:01:12.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/addons/resource.language.en_gb/resources/strings.po	2016-08-29 08:59:59.000000000 +0300
@@ -5459,7 +5459,7 @@ msgstr ""
 
 #: system/settings/settings.xml
 msgctxt "#13010"
-msgid "Hibernate"
+msgid "Games"
 msgstr ""
 
 #: system/settings/settings.xml
diff -Naurp kodi-16.1-c6f6e0b/xbmc/Application.cpp kodi-16.1-c6f6e0b-patch/xbmc/Application.cpp
--- kodi-16.1-c6f6e0b/xbmc/Application.cpp	2016-08-29 09:01:13.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/xbmc/Application.cpp	2016-08-29 08:05:42.000000000 +0300
@@ -225,6 +225,8 @@
 #include "pictures/GUIWindowSlideShow.h"
 #include "windows/GUIWindowLoginScreen.h"
 
+#include <fstream>
+
 using namespace ADDON;
 using namespace XFILE;
 #ifdef HAS_DVD_DRIVE
@@ -1083,6 +1085,39 @@ void CApplication::CreateUserDirs()
 
 bool CApplication::Initialize()
 {
+  // TV backend start
+  std::ifstream isRunVDR, isRunTVH, isRunACE, isRunProxy, isAllACE, isAllProxy;
+
+  isRunVDR.open("/storage/.cache/services/vdr-backend.conf");
+  if(isRunVDR.good())
+    system("systemctl start vdr-backend.service");
+  isRunVDR.close();
+
+  isRunTVH.open("/storage/.cache/services/tvheadend.conf");
+  if(isRunTVH.good())
+    system("systemctl start tvheadend.service");
+  isRunTVH.close();
+
+  isRunACE.open("/storage/.cache/services/acestream.conf");
+  if(isRunACE.good())
+  {
+    isAllACE.open("/var/lock/acestream.always");
+    if(!isAllACE.good())
+      system("systemctl start acestream.service");
+    isAllACE.close();
+  }
+  isRunACE.close();
+
+  isRunProxy.open("/storage/.cache/services/aceproxy.conf");
+  if(isRunProxy.good())
+  {
+    isAllProxy.open("/var/lock/aceproxy.always");
+    if(!isAllProxy.good())
+      system("systemctl start aceproxy.service");
+    isAllProxy.close();
+  }
+  isRunProxy.close();
+
 #if defined(HAS_DVD_DRIVE) && !defined(TARGET_WINDOWS) // somehow this throws an "unresolved external symbol" on win32
   // turn off cdio logging
   cdio_loglevel_default = CDIO_LOG_ERROR;
@@ -2501,6 +2536,7 @@ void CApplication::OnApplicationMessage(
 
   case TMSG_QUIT:
     SetExitCode(EXITCODE_QUIT);
+    Stop(EXITCODE_QUIT);
     break;
   
   case TMSG_SHUTDOWN:
@@ -2512,7 +2548,8 @@ void CApplication::OnApplicationMessage(
     break;
 
   case TMSG_HIBERNATE:
-    g_powerManager.Hibernate();
+    SetExitCode(EXITCODE_GAMES);
+    Stop(EXITCODE_GAMES);
     break;
 
   case TMSG_SUSPEND:
@@ -2925,6 +2962,39 @@ void CApplication::Stop(int exitCode)
 {
   try
   {
+    // TV backend stop
+    std::ifstream isRunVDR, isRunTVH, isRunACE, isRunProxy, isAllACE, isAllProxy;
+
+    isRunVDR.open("/storage/.cache/services/vdr-backend.conf");
+    if(isRunVDR.good())
+      system("systemctl stop vdr-backend.service");
+    isRunVDR.close();
+
+    isRunTVH.open("/storage/.cache/services/tvheadend.conf");
+    if(isRunTVH.good())
+      system("systemctl stop tvheadend.service");
+    isRunTVH.close();
+
+    isRunProxy.open("/storage/.cache/services/aceproxy.conf");
+    if(isRunProxy.good())
+    {
+      isAllProxy.open("/var/lock/aceproxy.always");
+      if(!isAllProxy.good())
+        system("systemctl stop aceproxy.service");
+      isAllProxy.close();
+    }
+    isRunProxy.close();
+
+    isRunACE.open("/storage/.cache/services/acestream.conf");
+    if(isRunACE.good())
+    {
+      isAllACE.open("/var/lock/acestream.always");
+      if(!isAllACE.good())
+        system("systemctl stop acestream.service");
+      isAllACE.close();
+    }
+    isRunACE.close();
+
     CVariant vExitCode(CVariant::VariantTypeObject);
     vExitCode["exitcode"] = m_ExitCode;
     CAnnouncementManager::GetInstance().Announce(System, "xbmc", "OnQuit", vExitCode);
@@ -3046,6 +3116,26 @@ void CApplication::Stop(int exitCode)
     av_lockmgr_register(NULL);
 
     CLog::Log(LOGNOTICE, "stopped");
+
+    // start VDR & Games
+    if (m_ExitCode == EXITCODE_QUIT) // start VDR
+    {
+      std::ifstream isStartVDR;
+      isStartVDR.open("/storage/.cache/services/vdr.conf");
+      if(isStartVDR.good())
+      {
+        system("rm -f /var/lock/start.kodi");
+        system("touch /var/lock/start.vdr");
+        system("systemctl start vdr.service");
+      }
+      isStartVDR.close();
+    }
+    else if (m_ExitCode == EXITCODE_GAMES) // start Games
+    {
+        system("rm -f /var/lock/start.kodi");
+        system("touch /var/lock/start.games");
+        system("systemctl start emustation.service");
+    }
   }
   catch (...)
   {
diff -Naurp kodi-16.1-c6f6e0b/xbmc/powermanagement/linux/FallbackPowerSyscall.h kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/linux/FallbackPowerSyscall.h
--- kodi-16.1-c6f6e0b/xbmc/powermanagement/linux/FallbackPowerSyscall.h	2016-04-26 10:06:23.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/linux/FallbackPowerSyscall.h	2016-08-29 08:59:59.000000000 +0300
@@ -27,12 +27,12 @@ class CFallbackPowerSyscall : public CPo
 public:
   virtual bool Powerdown() {return true; }
   virtual bool Suspend() {return false; }
-  virtual bool Hibernate() {return false; }
+  virtual bool Hibernate() {return true; }
   virtual bool Reboot() {return true; }
 
   virtual bool CanPowerdown() {return true; }
   virtual bool CanSuspend() {return false; }
-  virtual bool CanHibernate() {return false; }
+  virtual bool CanHibernate() {return true; }
   virtual bool CanReboot() {return true; }
   virtual int  BatteryLevel() {return 0; }
 };
diff -Naurp kodi-16.1-c6f6e0b/xbmc/powermanagement/linux/LogindUPowerSyscall.cpp kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/linux/LogindUPowerSyscall.cpp
--- kodi-16.1-c6f6e0b/xbmc/powermanagement/linux/LogindUPowerSyscall.cpp	2016-04-26 10:06:23.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/linux/LogindUPowerSyscall.cpp	2016-08-29 08:59:59.000000000 +0300
@@ -128,7 +128,7 @@ bool CLogindUPowerSyscall::CanSuspend()
 
 bool CLogindUPowerSyscall::CanHibernate()
 {
-  return m_canHibernate;
+  return true;
 }
 
 bool CLogindUPowerSyscall::CanReboot()
diff -Naurp kodi-16.1-c6f6e0b/xbmc/powermanagement/PowerManager.cpp kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/PowerManager.cpp
--- kodi-16.1-c6f6e0b/xbmc/powermanagement/PowerManager.cpp	2016-04-26 10:06:23.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/xbmc/powermanagement/PowerManager.cpp	2016-08-29 08:59:59.000000000 +0300
@@ -190,7 +190,7 @@ bool CPowerManager::Suspend()
 
 bool CPowerManager::Hibernate()
 {
-  return (CanHibernate() && m_instance->Hibernate());
+  return true;
 }
 
 bool CPowerManager::Reboot()
@@ -219,7 +219,7 @@ bool CPowerManager::CanSuspend()
 }
 bool CPowerManager::CanHibernate()
 {
-  return m_instance->CanHibernate();
+  return true;
 }
 bool CPowerManager::CanReboot()
 {
@@ -312,15 +312,8 @@ void CPowerManager::SettingOptionsShutdo
 {
   if (g_powerManager.CanPowerdown())
     list.push_back(make_pair(g_localizeStrings.Get(13005), POWERSTATE_SHUTDOWN));
-  if (g_powerManager.CanHibernate())
-    list.push_back(make_pair(g_localizeStrings.Get(13010), POWERSTATE_HIBERNATE));
   if (g_powerManager.CanSuspend())
     list.push_back(make_pair(g_localizeStrings.Get(13011), POWERSTATE_SUSPEND));
-  if (!g_application.IsStandAlone())
-  {
-    list.push_back(make_pair(g_localizeStrings.Get(13009), POWERSTATE_QUIT));
-#if !defined(TARGET_DARWIN_IOS)
-    list.push_back(make_pair(g_localizeStrings.Get(13014), POWERSTATE_MINIMIZE));
-#endif
-  }
+  list.push_back(make_pair(g_localizeStrings.Get(13012), POWERSTATE_QUIT));
+  list.push_back(make_pair(g_localizeStrings.Get(13010), POWERSTATE_HIBERNATE));
 }
diff -Naurp kodi-16.1-c6f6e0b/xbmc/XBApplicationEx.h kodi-16.1-c6f6e0b-patch/xbmc/XBApplicationEx.h
--- kodi-16.1-c6f6e0b/xbmc/XBApplicationEx.h	2016-08-29 09:01:12.000000000 +0300
+++ kodi-16.1-c6f6e0b-patch/xbmc/XBApplicationEx.h	2016-08-29 08:59:59.000000000 +0300
@@ -29,6 +29,7 @@ enum {
   EXITCODE_POWERDOWN = 64,
   EXITCODE_RESTARTAPP= 65,
   EXITCODE_REBOOT    = 66,
+  EXITCODE_GAMES     = 67,
 };
 
 class CXBApplicationEx : public IWindowManagerCallback
